# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-docker-image:
    docker:
      # Use the same Docker base as the project
      - image: docker:17.05.0-ce-git

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      # run lint!
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME . --no-cache
            docker image ls

  upload-docker:
    docker:
      - image: docker:17.05.0-ce-git

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:stable
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:stable

  deploy:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: gpt-app
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: k8s/deployment.yml
          resource-name: deployment/gpt-app
          show-kubectl-command: true

workflows:
  default:
    jobs:
      - lint
      - build-docker-image:
          requires: [lint]
      - upload-docker:
          requires: [build-docker-image]
      - deploy:
          requires: [upload-docker]
